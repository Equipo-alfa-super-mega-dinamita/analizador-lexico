component:
	    ¿
	|   spec_component     {tk_semicolon}
	|   combined_component {tk_semicolon}
	|   separate_body      {tk_semicolon}
	|   error
	;

spec_component:
	    comp_label spec_stmt_ls spec_body
	;

combined_component:
	    combined_specpart body_stmt_ls end_id
	;

combined_specpart:
	    comp_label comp_params
	;

comp_label:
	    comp_kwd {tk_id}
	;

comp_kwd:
	    {tk_global}
	|   {tk_resource}
	;

spec_body:
	    end_id
	|   {tk_body}   {tk_id} maybe_params spec_body2
	;

spec_body2:
		body_stmt_ls end_id
	|	{tk_separate}
	;

maybe_params:
	    ¿
	|   comp_params
	;

comp_params:
	    parameters
	;

separate_body:
	    {tk_body}   {tk_id} body_stmt_ls end_id;

//===================    spec body contents  ==================================
spec_stmt_ls:
	    spec_stmt spec_stmt_ls2
	;

spec_stmt_ls2:
		{tk_semicolon} spec_stmt spec_stmt_ls2
	;


spec_stmt:
	    common_stmt
	|   extend_clause
	|   body_only
	;


body_stmt_ls:
	    body_stmt
	|   body_stmt_ls {tk_semicolon} body_stmt
	;

body_stmt:
	    common_stmt
	|   expr
	|   body_only
	|   extend_clause
	;

body_only:
	    stmt
	|   proc
	|   process
	|   procedure
	|   initial_block
	|   final_block
	;


common_stmt:
	    ¿
	|   decl
	|   import_clause
	;


import_clause:
	    {tk_import} import_list
	;

extend_clause:
	    {tk_extend} import_list
	;

import_list:
	    import_name import_list2
	;

import_list2:
		{tk_comma} import_name import_list2
	|	¿
	;

import_name:
	    {tk_id}
	;

//===================  Top level body statements=======================
op_decl:
	    op_or_ext oper_def_lp
	;

op_or_ext:
	    {tk_op}
	|   {tk_external}
	;

oper_def_lp:
	    oper_def oper_def_lp2
	;

oper_def_lp2:
	  	{tk_comma} oper_def oper_def_lp2
	;

oper_def:
	    id_subs_lp oper_def2
	;

oper_def2:
		op_prototype
	|	colon_opt qualified_id

colon_opt:
	    ¿
	|   {tk_colon}
	;


sem_decl:
	    {tk_sem} sem_def_lp
	;

sem_def_lp:
	    sem_def sem_def_lp2
	;

sem_def_lp2:
	    {tk_comma} sem_def sem_def_lp2
	|	¿
	;


sem_def:
	    id_subs sem_proto sem_init
	;

sem_proto:
	    return_spec_null
	;

sem_init:
	    ¿
	|   {tk_assign} expr
	;



proc:
	    {tk_proc} {tk_id} param_names block end_id
	;


procedure:
	    {tk_procedure} {tk_id} prototype block end_id
	;


process:
	    {tk_process} {tk_id} return_spec_null quantifiers_opt block end_id
	;


initial_block:
	    {tk_initial} block {tk_end} initial_opt
	;

initial_opt:
	    ¿
	|   {tk_initial}
	;


final_block:
	    {tk_final} block {tk_end} final_opt
	;

final_opt:
	    ¿
	|   {tk_final}
	;

//=============== Parameters  ==============================
prototype:
	    parameters return_spec_opt
	;

parameters:
	    {tk_lparen} param_spec_ls {tk_rparen}
	;

param_spec_ls:
	    ¿
	|   param_spec_lp
	;

param_spec_lp:
	    param_spec param_spec_lp2
	;

param_spec_lp2:
	| {tk_semicolon} param_spec_lp3
	| ¿
	;

param_spec_lp3:
	| {tk_semicolon} param_spec_lp
	| ¿
	;

param_spec:
	    param_kind_opt param_spec2
	;

param_spec2:
	    type
	|   id_subs_lp {tk_colon} type
	;

param_kind_opt:
	    ¿
	|   {tk_val}
	|   {tk_var}
	|   {tk_res}
	|   {tk_ref}
	;

return_spec_opt:
	    return_spec_null
	|   {tk_returns} return_spec_opt2
	;

return_spec_opt2:
	    type
	|   id_subs {tk_colon} type
	|   {tk_id} {tk_bogus}
	;


return_spec_null:
	    ¿
	;

param_names:
	    {tk_lparen} id_ls {tk_rparen} return_name_opt
	;

return_name_opt:
	    ¿
	|   {tk_returns} {tk_id}
	;
//======== Declaration ========

decl:
	    error {tk_semicolon}
	|   type_decl
	|   obj_decl
	|   optype_decl
	|   sem_decl
	|   op_decl
	;


type_decl:
	    {tk_type} {tk_id} {tk_eq} type type_restriction
	;

type_restriction:
	    ¿
	|   {tk_lbrace} {tk_id} {tk_rbrace}
	;

obj_decl:
	    var_or_const var_def_lp
	;

var_or_const:
	    {tk_var}
	|   {tk_const}
	;

var_def_lp:
	    var_def var_def_lp2
	;

var_def_lp2:
	    {tk_comma} var_def var_def_lp2
	|	¿
	;

var_def:
	    id_subs_lp var_att
	;

var_att:
	    {tk_colon} type var_att2
	|   {tk_assign} expr
	|   {tk_semicolon}
	;

var_att2:
	    ¿
	|   {tk_assign} expr
	;